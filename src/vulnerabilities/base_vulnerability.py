"""Base class for vulnerability checkers."""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Tuple
from dataclasses import dataclass

@dataclass
class VulnerabilityTestCase:
    """Test case for a vulnerability."""
    name: str
    vulnerable_code: str
    secure_code: str
    description: str
    severity: int  # 1-10
    cwe_id: str

class VulnerabilityChecker(ABC):
    """Abstract base class for vulnerability checkers."""
    
    @property
    @abstractmethod
    def vulnerability_type(self) -> str:
        """Return the type of vulnerability this checker handles."""
        pass
    
    @property
    @abstractmethod
    def cwe_id(self) -> str:
        """Return the CWE ID for this vulnerability."""
        pass
    
    @abstractmethod
    def check(self, code: str) -> bool:
        """Check if code contains the vulnerability."""
        pass
    
    @abstractmethod
    def get_details(self, code: str) -> Dict[str, Any]:
        """Get detailed analysis of vulnerability in code."""
        pass
    
    @abstractmethod
    def get_test_cases(self) -> List[VulnerabilityTestCase]:
        """Get test cases for this vulnerability."""
        pass
    
    @abstractmethod
    def get_detection_patterns(self) -> List[str]:
        """Get regex patterns for detecting this vulnerability."""
        pass
    
    def assess_severity(self, code: str) -> int:
        """Assess severity of vulnerability (1-10)."""
        if not self.check(code):
            return 0
        
        # Default severity assessment based on common factors
        severity = 5  # Base severity
        
        # Increase severity for certain patterns
        high_risk_patterns = self._get_high_risk_patterns()
        for pattern in high_risk_patterns:
            if pattern in code.lower():
                severity += 1
        
        return min(severity, 10)
    
    def _get_high_risk_patterns(self) -> List[str]:
        """Get patterns that increase severity."""
        return [
            "eval(",
            "exec(",
            "os.system",
            "__import__",
            "subprocess.call",
            "shell=true"
        ]
    
    def validate_fix(self, original_code: str, fixed_code: str) -> Tuple[bool, str]:
        """Validate if a fix properly addresses the vulnerability."""
        if self.check(fixed_code):
            return False, "Fixed code still contains vulnerability"
        
        # Check if fix maintains functionality (basic check)
        if len(fixed_code) < len(original_code) * 0.5:
            return False, "Fix appears to remove too much functionality"
        
        return True, "Fix appears valid"